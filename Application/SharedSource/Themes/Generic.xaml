<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:AJut.Application.Controls"
    xmlns:ajut="clr-namespace:AJut.Application"
    xmlns:ap="clr-namespace:AJut.Application.AttachedProperties"
    xmlns:conv="clr-namespace:AJut.Application.Converters"
    xmlns:tree="clr-namespace:AJut.Tree;assembly=AJut.Core"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">


    <Style TargetType="{x:Type local:ToggleStrip}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ToggleStrip}">
                    <Border Background="{ajut:TemplateBinding Background}"
                            BorderBrush="{ajut:TemplateBinding BorderBrush}"
                            BorderThickness="{ajut:TemplateBinding BorderThickness}"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=local:ToggleStrip}, Path=(ap:BorderXTA.CornerRadius)}">
                        <ItemsControl ItemsSource="{ajut:TemplateBinding Items}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <ToggleButton IsChecked="{Binding Path=IsSelected, Mode=TwoWay}"
                                                  Background="Transparent"
                                                  BorderBrush="{Binding Path=SeparatorBrush, RelativeSource={RelativeSource AncestorType={x:Type local:ToggleStrip}}}">
                                        <Grid Margin="{Binding Path=ItemPadding, RelativeSource={RelativeSource AncestorType={x:Type local:ToggleStrip}}}">
                                            <ContentPresenter Content="{Binding Data}"
                                                              ContentTemplate="{Binding Path=ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type local:ToggleStrip}}}"
                                                              Visibility="{Binding Path=ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type local:ToggleStrip}}, Converter={conv:NullnessToVisibilityConverter}}"/>
                                            <TextBlock Text="{Binding Name}" VerticalAlignment="Center"
                                                       Visibility="{Binding Path=ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type local:ToggleStrip}}, Converter={conv:NullnessToVisibilityConverter WhenNull=Visible, WhenNotNull=Collapsed}}"/>
                                        </Grid>
                                        <ToggleButton.Template>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Border x:Name="RootBorder" Background="{ajut:TemplateBinding Background}"
                                                        BorderBrush="{ajut:TemplateBinding BorderBrush}">
                                                    <Border.Style>
                                                        <Style TargetType="{x:Type Border}">
                                                            <Setter Property="CornerRadius" Value="0"/>
                                                            <Setter Property="BorderThickness"
                                                                    Value="{Binding Path=SeparatorThickness, 
                                                                                    RelativeSource={RelativeSource AncestorType={x:Type local:ToggleStrip}}, 
                                                                                    Converter={local:ToggleStripBorderThicknessConverter Placement=Center}}" />
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding Path=IsFirstItem}" Value="True">
                                                                    <Setter Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource AncestorType=local:ToggleStrip}, Path=(ap:BorderXTA.CornerRadius), Converter={local:ToggleStripCornerRadiusConverter Placement=First, Reduction=2}}"/>
                                                                    <Setter Property="BorderThickness" Value="{Binding Path=SeparatorThickness, 
                                                                            RelativeSource={RelativeSource AncestorType={x:Type local:ToggleStrip}}, 
                                                                            Converter={local:ToggleStripBorderThicknessConverter Placement=First}}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding Path=IsLastItem}" Value="True">
                                                                    <Setter Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource AncestorType=local:ToggleStrip}, Path=(ap:BorderXTA.CornerRadius), Converter={local:ToggleStripCornerRadiusConverter Placement=Last, Reduction=2}}"/>
                                                                    <Setter Property="BorderThickness" Value="{Binding Path=SeparatorThickness, 
                                                                            RelativeSource={RelativeSource AncestorType={x:Type local:ToggleStrip}}, 
                                                                            Converter={local:ToggleStripBorderThicknessConverter Placement=Last}}" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Border.Style>
                                                    <Border x:Name="InnerBorder">
                                                        <Border.Style>
                                                            <Style TargetType="{x:Type Border}">
                                                                <Setter Property="Background" Value="Transparent"/>
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding Path=IsFirstItem}" Value="True">
                                                                        <Setter Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource AncestorType=local:ToggleStrip}, Path=(ap:BorderXTA.CornerRadius), Converter={local:ToggleStripCornerRadiusConverter Placement=First, Reduction=2}}"/>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=IsLastItem}" Value="True">
                                                                        <Setter Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource AncestorType=local:ToggleStrip}, Path=(ap:BorderXTA.CornerRadius), Converter={local:ToggleStripCornerRadiusConverter Placement=Last, Reduction=2}}"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Border.Style>
                                                        <ContentPresenter Content="{ajut:TemplateBinding Content}"/>
                                                    </Border>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Setter TargetName="RootBorder" Property="Background">
                                                            <Setter.Value>
                                                                <!-- Generic depressed highlight -->
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" >
                                                                    <GradientStop Offset="0.00" Color="#0D0D0D" />
                                                                    <GradientStop Offset="0.20" Color="#552BA2D8" />
                                                                    <GradientStop Offset="1.00" Color="#552BA2D8" />
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Trigger>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="InnerBorder" Property="Background">
                                                            <Setter.Value>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" >
                                                                    <GradientStop Offset="0.00" Color="#1E8BB5" />
                                                                    <GradientStop Offset="0.10" Color="#1EA1D0" />
                                                                    <GradientStop Offset="0.90" Color="#2BA2D8" />
                                                                    <GradientStop Offset="1.00" Color="#1E8BB5" />
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </ToggleButton.Template>
                                    </ToggleButton>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <PathGeometry x:Key="right_arrow_glyph" Figures="m 1.5822262 13.149315 c -0.5104897 -0.205966 -0.92816294 -0.88364 -0.92816294 -1.505871 0 -0.747823 0.41673204 -0.971472 1.22922564 -0.659657 0.7509982 0.288294 1.9081465 -0.165894 2.9742889 -1.1677221 L 6.6026364 8.1766679 4.9774932 6.4468079 C 3.94602 5.3488411 2.8595106 4.8733389 2.0032072 5.1451022 0.00772098 5.7784558 0.30315793 3.6844047 2.3649705 2.5809589 3.8795976 1.7703573 4.5397827 1.9764092 8.1195848 4.3770274 10.343622 5.8684842 12.268372 7.3746665 12.396809 7.7241016 12.525237 8.0735369 11.02162 9.5395199 9.0554204 10.981861 5.6864344 13.453213 3.7367396 14.018674 1.5822262 13.149315 Z M 1.3966051 8.0721009 c 0 -0.7647831 0.4866523 -1.1289737 1.2994289 -0.9724276 C 4.2611719 7.4010096 4.1624834 8.7188969 2.5496184 9.0546959 1.8768988 9.1948119 1.3966021 8.7853539 1.3966051 8.0721009 Z" FillRule="NonZero"/>
    <PathGeometry x:Key="down_arrow_glyph" Figures="m 1.9572636 1.6982037 c 1.0968071 0.3816158 2.9912883 0.6937946 4.2099563 0.6937946 1.2186747 0 3.1131525 -0.3122099 4.2099561 -0.6937946 1.520237 -0.52888 1.994191 -0.3604182 1.994191 0.7088214 0 1.7263056 -5.2220938 11.1251409 -6.1812262 11.1251409 C 4.1445438 11.057221 -2.0098302 0.43191585 1.9572636 1.6982037 Z" FillRule="NonZero"/>

    <Style x:Key="STYLE_FlatTreeListBoxItem" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border" Padding="2" SnapsToDevicePixels="true">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="Background" Value="Transparent"/>
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=IsSelectable}" Value="True" />
                                            <Condition Binding="{ajut:TemplateBinding Path=IsSelected}" Value="True" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType=local:FlatTreeListControl}, Path=SelectionBrush}"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=IsSelectable}" Value="True" />
                                            <Condition Binding="{ajut:TemplateBinding Path=IsSelected}" Value="True" />
                                            <Condition Binding="{ajut:TemplateBinding Path=(Selector.IsSelectionActive)}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType=local:FlatTreeListControl}, Path=SelectionInactiveBrush}"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <ContentPresenter HorizontalAlignment="Stretch"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:FlatTreeListControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FlatTreeListControl}">
                    <ListBox x:Name="PART_ListBoxDisplay" ItemsSource="{ajut:TemplateBinding Path=Items}"
                             SelectionMode="{ajut:TemplateBinding Path=SelectionMode}"
                             VirtualizingPanel.IsVirtualizing="True"
                             ItemContainerStyle="{StaticResource STYLE_FlatTreeListBoxItem}"
                             Background="{TemplateBinding Background}"
                             BorderThickness="{TemplateBinding BorderThickness}"
                             BorderBrush="{TemplateBinding BorderBrush}">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="14"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid x:Name="Spacing" Grid.Column="0">
                                        <Grid.Width>
                                            <MultiBinding Converter="{conv:ArithmeticConverter Operation=Multiply}">
                                                <Binding Path="TreeDepth" Mode="OneWay"/>
                                                <Binding RelativeSource="{RelativeSource AncestorType=local:FlatTreeListControl}" Path="TabbingSize"/>
                                            </MultiBinding>
                                        </Grid.Width>
                                    </Grid>
                                    <ToggleButton x:Name="Expander" Grid.Column="1" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay}" HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="BorderThickness" Value="0" />
                                                <Setter Property="Content" Value="{StaticResource right_arrow_glyph}" />
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Path Width="14" Height="14" 
                                                                  Stroke="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=BorderBrush}" 
                                                                  Fill="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=Foreground}" 
                                                                  StrokeThickness="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=BorderThickness}">
                                                                <Path.Style>
                                                                    <Style TargetType="{x:Type Path}">
                                                                        <Setter Property="Data" Value="{StaticResource right_arrow_glyph}" />
                                                                        <Style.Triggers>
                                                                            <DataTrigger Binding="{Binding Path=IsExpanded}" Value="True">
                                                                                <Setter Property="Data" Value="{StaticResource down_arrow_glyph}" />
                                                                            </DataTrigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </Path.Style>
                                                            </Path>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=IsExpandable}" Value="False">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                    </DataTrigger>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" Value="Transparent" />
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                    <ContentPresenter x:Name="Content" Grid.Column="2" Content="{Binding Source}" HorizontalAlignment="Stretch"/>
                                </Grid>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:EditableTextBlock}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:EditableTextBlock}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{ajut:TemplateBinding Path=(ap:BorderXTA.CornerRadius)}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <ContentPresenter.Style>
                                <Style TargetType="{x:Type ContentPresenter}">
                                    
                                    <!-- =================[ Label Mode: Normal ]===================== -->
                                    <Setter Property="ContentTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},        Path=Text}" 
                                                           FontFamily="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=FontFamily}" 
                                                           FontSize="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},    Path=FontSize}"
                                                           FontWeight="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=FontWeight}"
                                                           FontStretch="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}}, Path=FontStretch}"
                                                           Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=Foreground}"
                                                           FontStyle="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},   Path=FontStyle}" 
                                                           Focusable="True"/>
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <!-- =================[ Label Mode: Is Empty ]===================== -->
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}}, Path=IsEmpty, Mode=OneWay}" Value="True">
                                            <Setter Property="ContentTemplate">
                                                <Setter.Value>
                                                    <DataTemplate>
                                                        <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},        Path=NoTextSetMessage}"
                                                                   FontFamily="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=FontFamily}" 
                                                                   FontSize="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},    Path=FontSize}"
                                                                   FontWeight="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=FontWeight}"
                                                                   FontStretch="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}}, Path=FontStretch}"
                                                                   Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=Foreground}"
                                                                   FontStyle="Italic"                                                                                    
                                                                   Opacity="{Binding RelativeSource={RelativeSource Self}, Path=IsFocused, Converter={conv:BooleanToValueConverter TrueValue=1.0, FalseValue=0.8}}"
                                                                   Focusable="True"/>
                                                    </DataTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                        
                                        <!-- =================[ Text Editor Mode ]===================== -->
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}}, Path=IsEditing, Mode=OneWay}" Value="True">
                                            <Setter Property="ContentTemplate">
                                                <Setter.Value>
                                                    <DataTemplate>
                                                        <TextBox IsReadOnlyCaretVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=IsReadOnlyCaretVisible}" 
                                                                 BorderThickness="0"
                                                                 IsReadOnly="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=IsReadOnly}" 
                                                                 Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},        Path=Text, UpdateSourceTrigger=PropertyChanged}" 
                                                                 FontFamily="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=FontFamily}" 
                                                                 FontSize="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},    Path=FontSize}"
                                                                 FontWeight="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=FontWeight}"
                                                                 FontStretch="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}}, Path=FontStretch}"
                                                                 FontStyle="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},   Path=FontStyle}"
                                                                 MinWidth="20"/>
                                                    </DataTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>

                                        <!-- =================[ Text Editor While Empty ]===================== -->
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}}, Path=IsEditing, Mode=OneWay}" Value="True"/>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}}, Path=StartedEditingEmpty, Mode=OneWay}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.Setters>
                                                <Setter Property="ContentTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <Grid>
                                                                <TextBox IsReadOnlyCaretVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=IsReadOnlyCaretVisible}" 
                                                                         IsReadOnly="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=IsReadOnly}" 
                                                                         Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},        Path=Text, UpdateSourceTrigger=PropertyChanged}" 
                                                                         FontFamily="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=FontFamily}" 
                                                                         FontSize="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},    Path=FontSize}"
                                                                         FontWeight="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=FontWeight}"
                                                                         FontStretch="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}}, Path=FontStretch}"
                                                                         FontStyle="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},   Path=FontStyle}" 
                                                                         MinWidth="20"
                                                                         BorderThickness="0"/>
                                                                <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},        Path=NoTextSetMessage}"
                                                                           FontFamily="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=FontFamily}" 
                                                                           FontSize="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},    Path=FontSize}"
                                                                           FontWeight="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=FontWeight}"
                                                                           FontStretch="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}}, Path=FontStretch}"
                                                                           Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}},  Path=Foreground}"
                                                                           FontStyle="Italic"                                                                                    
                                                                           Focusable="False"
                                                                           IsHitTestVisible="False"
                                                                           Opacity="0.4"
                                                                           Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:EditableTextBlock}}, Path=IsEmpty, Converter={conv:BooleanToVisibilityConverter TrueValue=Visible, FalseValue=Hidden}}"/>
                                                            </Grid>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </MultiDataTrigger.Setters>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentPresenter.Style>
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:PathFollowingContentDisplayer}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PathFollowingContentDisplayer}">
                    <Border x:Name="PathFollowingBorderRoot" BorderThickness="{TemplateBinding BorderThickness}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            Background="{TemplateBinding Background}"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType=local:PathFollowingContentDisplayer}, Path=(ap:BorderXTA.CornerRadius)}">
                        <Viewbox Stretch="Uniform">
                            <Canvas x:Name="PART_DisplayArea" Width="{ajut:TemplateBinding Path=Path.Bounds.Width}"
                                Height="{ajut:TemplateBinding Path=Path.Bounds.Height}"
                                Margin="{TemplateBinding Padding}"/>
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="DefaultNumericEditorLabelTemplate">
        <Viewbox>
            <Path Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:NumericEditor}}, Path=Foreground}">
                <Path.Data>
                    <PathGeometry Figures="m 5.7274579 31.027604 c 6.1e-4 -0.181901 0.29828 -1.991458 0.66146 -4.02124 0.36319 -2.02978 0.66034 -3.845483 0.66034 -4.034895 0 -0.264424 -0.76791 -0.344385 -3.3073 -0.344385 H 0.43466788 V 21.436459 20.245834 H 4.0015079 c 3.4835 0 3.56991 -0.01391 3.69861 -0.595313 0.32839 -1.483507 0.93664 -5.067738 0.93664 -5.519332 0 -0.468693 -0.25631 -0.499939 -4.10105 -0.499939 H 0.43466788 V 12.440625 11.25 H 4.8002979 c 2.40109 0 4.37335 -0.02976 4.3828 -0.06614 0.009 -0.03638 0.46088 -2.5069269 1.0031901 -5.4901039 l 0.98601 -5.42395898 1.40053 -0.08075 c 1.2453 -0.0718 1.38481 -0.02782 1.25873 0.396875 -0.24227 0.81606498 -1.75522 9.54501688 -1.75522 10.12673388 0 0.537766 0.0985 0.549066 4.16719 0.477924 l 4.16718 -0.07286 0.91985 -5.4901039 0.91985 -5.49010398 h 1.26297 c 1.02759 0 1.26239 0.08629 1.25991 0.46302 -0.002 0.254662 -0.3575 2.54661498 -0.7907 5.09322998 -0.4332 2.546614 -0.78902 4.8385669 -0.7907 5.0932289 -0.003 0.418257 0.34226 0.46302 3.56882 0.46302 h 3.57188 v 1.190625 1.190625 h -3.83646 c -2.11005 0 -3.83725 0.02977 -3.83821 0.06615 -9.7e-4 0.03638 -0.2383 1.435365 -0.52741 3.108854 -0.28912 1.67349 -0.52645 3.132005 -0.52742 3.241146 -9.6e-4 0.109141 1.96278 0.198438 4.36387 0.198438 h 4.36563 v 1.184377 1.184377 l -4.56406 0.07239 -4.56407 0.07239 -0.58489 3.439583 c -0.32169 1.891771 -0.6545 3.826537 -0.73959 4.29948 -0.14998 0.833622 -0.19476 0.859895 -1.46563 0.859895 -0.72101 0 -1.30978 -0.0893 -1.30838 -0.198437 10e-4 -0.109141 0.29791 -1.924844 0.65891 -4.034896 0.36101 -2.110052 0.65752 -3.988236 0.65892 -4.173741 0.002 -0.262543 -0.94974 -0.321173 -4.29481 -0.264584 l -4.2973501 0.0727 -0.77415 4.299479 -0.77415 4.299479 h -1.2785 c -0.84701 0 -1.27812 -0.111619 -1.27738 -0.330729 z M 18.823788 19.980316 c 0.30491 -0.493356 1.14494 -5.950483 0.94788 -6.157766 -0.10749 -0.113067 -2.03088 -0.172598 -4.2742 -0.132292 l -4.07876 0.07328 -0.54914 3.112841 c -0.30203 1.712062 -0.49141 3.170578 -0.42084 3.241145 0.25749 0.257487 8.21167 0.12717 8.37506 -0.137212 z" FillRule="NonZero"/>
                </Path.Data>
            </Path>
        </Viewbox>
    </DataTemplate>

    <Style TargetType="{x:Type local:NumericEditor}">
        <Setter Property="BorderBrush" Value="#000" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ap:BorderXTA.CornerRadius" Value="2"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" >
                    <GradientStop Offset="0.00" Color="#FFF" />
                    <GradientStop Offset="0.50" Color="#CCC" />
                    <GradientStop Offset="1.00" Color="#CCC" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:NumericEditor}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{ajut:TemplateBinding Path=(ap:BorderXTA.CornerRadius)}">
                        <Grid>
                            <DockPanel>
                                <!-- ==========[Button Area]===================== -->
                                <Grid DockPanel.Dock="{TemplateBinding LabelButtonDock}">
                                    <ContentControl Height="{Binding ElementName=PART_TextArea, Path=ActualHeight}"
                                                    IsHitTestVisible="False" FocusVisualStyle="{x:Null}"
                                                    Margin="{TemplateBinding LabelPadding}">
                                        <ContentControl.Style>
                                            <Style TargetType="{x:Type ContentControl}">
                                                <Setter Property="Content" Value="{ajut:TemplateBinding Path=LabelContent}" />
                                                <Setter Property="ContentTemplate" Value="{ajut:TemplateBinding Path=LabelContentTemplate}" />
                                                <Style.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{ajut:TemplateBinding Path=LabelContent, Converter={conv:NullnessChecker}}" Value="True"/>
                                                            <Condition Binding="{ajut:TemplateBinding Path=LabelContentTemplate, Converter={conv:NullnessChecker}}" Value="True"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="ContentTemplate" Value="{StaticResource DefaultNumericEditorLabelTemplate}"/>
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ContentControl.Style>
                                    </ContentControl>
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <RepeatButton Grid.Row="0" Command="{x:Static local:NumericEditor.NudgeIncrease}">
                                            <RepeatButton.Style>
                                                <Style TargetType="{x:Type RepeatButton}">
                                                    <Setter Property="Background" Value="#01000000" />
                                                    <Setter Property="BorderThickness" Value="0"/>
                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                <Border IsHitTestVisible="True"
                                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                                        Background="{TemplateBinding Background}"
                                                                />
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background">
                                                                <Setter.Value>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" >
                                                                        <GradientStop Offset="0.00" Color="#C000" />
                                                                        <GradientStop Offset="1.00" Color="#0000" />
                                                                    </LinearGradientBrush>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </RepeatButton.Style>
                                        </RepeatButton>
                                        <RepeatButton Grid.Row="1" Command="{x:Static local:NumericEditor.NudgeDecrease}">
                                            <RepeatButton.Style>
                                                <Style TargetType="{x:Type RepeatButton}">
                                                    <Setter Property="Background" Value="#01000000" />
                                                    <Setter Property="BorderThickness" Value="0"/>
                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                <Border IsHitTestVisible="True"
                                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                                        Background="{TemplateBinding Background}"
                                                                />
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background">
                                                                <Setter.Value>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" >
                                                                        <GradientStop Offset="1.00" Color="#C000" />
                                                                        <GradientStop Offset="0.00" Color="#0000" />
                                                                    </LinearGradientBrush>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </RepeatButton.Style>
                                        </RepeatButton>
                                    </Grid>
                                </Grid>

                                <!-- ==========[Textbox Area]==================== -->
                                <Grid VerticalAlignment="Center" Margin="{TemplateBinding Padding}">
                                    <TextBox x:Name="PART_TextArea" BorderThickness="0" TextAlignment="Right" Padding="{TemplateBinding Padding}"
                                             Text="{ajut:TemplateBinding Path=DisplayValue.Text, Mode=TwoWay}"/>
                                    <Border BorderBrush="#8000" BorderThickness="1.4,1.4,0,0">
                                        <Border BorderBrush="#5FFF" BorderThickness="0,0,1,1">
                                        </Border>
                                    </Border>
                                </Grid>
                            </DockPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <sys:String x:Key="RightChevronSymbol">&#xE974;</sys:String>
    <sys:String x:Key="LeftChevronSymbol" >&#xE973;</sys:String>
    <sys:String x:Key="UpChevronSymbol"   >&#xE70E;</sys:String>
    <sys:String x:Key="DownChevronSymbol" >&#xE70D;</sys:String>
    
    <Style TargetType="{x:Type local:BumpStack}">
        <Setter Property="ButtonBackground" Value="#000"/>
        <Setter Property="ButtonBorder" Value="#000"/>
        <Setter Property="ButtonForeground" Value="#888"/>
        <Setter Property="EdgeClearanceOffset" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:BumpStack}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <!-- ====================[ ScrollViewer Items Part ]==================== -->
                            <ScrollViewer x:Name="PART_ScrollItemsContainer"
                                          HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}" 
                                          VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
                                          ap:ScrollXTA.IsScrollWatchEnabled="True">
                                <ItemsControl ItemsSource="{ajut:TemplateBinding Children}" Margin="{ajut:TemplateBinding Padding}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:BumpStack}}, Path=Orientation}">
                                                <StackPanel.Style>
                                                    <Style TargetType="{x:Type StackPanel}">
                                                        <Setter Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:BumpStack}}, Path=EdgeAndButtonClearanceOffsetPadding}"/>
                                                        <Style.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding ElementName=PART_ScrollItemsContainer, Path=(ap:ScrollXTA.CanScrollHorizontally)}" Value="False"/>
                                                                    <Condition Binding="{Binding ElementName=PART_ScrollItemsContainer, Path=(ap:ScrollXTA.CanScrollVertically)}" Value="False"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <MultiDataTrigger.Setters>
                                                                    <Setter Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:BumpStack}}, Path=EdgeClearanceOffsetPadding}"/>
                                                                </MultiDataTrigger.Setters>
                                                            </MultiDataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </StackPanel.Style>
                                            </StackPanel>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </ScrollViewer>

                            <!-- ====================[ Bump Buttons ]==================== -->
                            <Grid Margin="0,0,0,0">
                                <Grid.Resources>
                                    <Style x:Key="BTN_HoverRepeat" TargetType="{x:Type RepeatButton}">
                                        <Setter Property="Delay" Value="1" />
                                        <Setter Property="Interval" Value="1" />
                                        <Setter Property="Opacity" Value="0.8" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                                                        <TextBlock FontFamily="Segoe MDL2 Assets" Text="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Opacity" Value="1"/>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Opacity" Value="0.4"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Grid.Resources>
                                <Grid.Style>
                                    <Style TargetType="{x:Type Grid}">
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:BumpStack}}, Path=Orientation}" Value="Horizontal"/>
                                                    <Condition Binding="{Binding ElementName=PART_ScrollItemsContainer, Path=ScrollableWidth}" Value="0"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:BumpStack}}, Path=Orientation}" Value="Vertical"/>
                                                    <Condition Binding="{Binding ElementName=PART_ScrollItemsContainer, Path=ScrollableHeight}" Value="0"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>
                                <RepeatButton x:Name="PART_AnteriorBumpButton"
                                              Background="{TemplateBinding ButtonBackground}"
                                              Foreground="{TemplateBinding ButtonForeground}"
                                              BorderBrush="{TemplateBinding ButtonBorder}"
                                              FontSize="{TemplateBinding ButtonFontSize}"
                                              Padding="{TemplateBinding ButtonPadding}"
                                              Interval="{TemplateBinding BumpInterval}"
                                              Delay="{TemplateBinding BumpDelay}"
                                              CommandTarget="{Binding ElementName=PART_ScrollItemsContainer}">
                                    <RepeatButton.Style>
                                        <Style TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource BTN_HoverRepeat}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:BumpStack}}, Path=Orientation}" Value="Horizontal">
                                                    <Setter Property="HorizontalAlignment" Value="Left"/>
                                                    <Setter Property="Content" Value="{StaticResource LeftChevronSymbol}"/>
                                                    <Setter Property="Command" Value="{Binding Source={x:Static ScrollBar.LineLeftCommand}}"/>
                                                    <Setter Property="IsEnabled" Value="{Binding ElementName=PART_ScrollItemsContainer, Path=(ap:ScrollXTA.CanScrollLeft)}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:BumpStack}}, Path=Orientation}" Value="Vertical">
                                                    <Setter Property="VerticalAlignment" Value="Top"/>
                                                    <Setter Property="Content" Value="{StaticResource UpChevronSymbol}"/>
                                                    <Setter Property="Command" Value="{Binding Source={x:Static ScrollBar.LineUpCommand}}"/>
                                                    <Setter Property="IsEnabled" Value="{Binding ElementName=PART_ScrollItemsContainer, Path=(ap:ScrollXTA.CanScrollUp)}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </RepeatButton.Style>
                                </RepeatButton>

                                <RepeatButton Background="{TemplateBinding ButtonBackground}"
                                              Foreground="{TemplateBinding ButtonForeground}"
                                              BorderBrush="{TemplateBinding ButtonBorder}"
                                              FontSize="{TemplateBinding ButtonFontSize}"
                                              Padding="{TemplateBinding ButtonPadding}"
                                              Interval="{TemplateBinding BumpInterval}"
                                              Delay="{TemplateBinding BumpDelay}"
                                              CommandTarget="{Binding ElementName=PART_ScrollItemsContainer}">
                                    <RepeatButton.Style>
                                        <Style TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource BTN_HoverRepeat}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:BumpStack}}, Path=Orientation}" Value="Horizontal">
                                                    <Setter Property="HorizontalAlignment" Value="Right"/>
                                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                    <Setter Property="Content" Value="{StaticResource RightChevronSymbol}"/>
                                                    <Setter Property="Command" Value="{Binding Source={x:Static ScrollBar.LineRightCommand}}"/>
                                                    <Setter Property="IsEnabled" Value="{Binding ElementName=PART_ScrollItemsContainer, Path=(ap:ScrollXTA.CanScrollRight)}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:BumpStack}}, Path=Orientation}" Value="Vertical">
                                                    <Setter Property="VerticalAlignment" Value="Bottom"/>
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                    <Setter Property="Content" Value="{StaticResource DownChevronSymbol}"/>
                                                    <Setter Property="Command" Value="{Binding Source={x:Static ScrollBar.LineDownCommand}}"/>
                                                    <Setter Property="IsEnabled" Value="{Binding ElementName=PART_ScrollItemsContainer, Path=(ap:ScrollXTA.CanScrollDown)}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </RepeatButton.Style>
                                </RepeatButton>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
